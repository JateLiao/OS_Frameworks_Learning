<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.lsj.os_frameworks_learning.os_frameworks.mybatis.dao.CoursesegmentMapper">
  <resultMap id="BaseResultMap" type="com.lsj.os_frameworks_learning.os_frameworks.mybatis.model.Coursesegment">
    <id column="id" jdbcType="INTEGER" property="id" />
    <result column="course_id" jdbcType="INTEGER" property="courseId" />
    <result column="segment_key" jdbcType="VARCHAR" property="segmentKey" />
    <result column="segment_name" jdbcType="VARCHAR" property="segmentName" />
    <result column="segment_description" jdbcType="VARCHAR" property="segmentDescription" />
    <result column="segment_order" jdbcType="INTEGER" property="segmentOrder" />
  </resultMap>
  <sql id="Base_Column_List">
    `id`, `course_id`, `segment_key`, `segment_name`, `segment_description`, `segment_order`
  </sql>
  <select id="selectByPrimaryKey" parameterType="java.lang.Integer" resultMap="BaseResultMap">
    select 
    <include refid="Base_Column_List" />
    from `tab_course_segment`
    where `id` = #{id,jdbcType=INTEGER}
  </select>
  <insert id="insert" parameterType="com.lsj.os_frameworks_learning.os_frameworks.mybatis.model.Coursesegment">
    <selectKey keyProperty="id" order="AFTER" resultType="java.lang.Integer">
      SELECT LAST_INSERT_ID()
    </selectKey>
    insert into `tab_course_segment` (`course_id`, `segment_key`, `segment_name`, 
      `segment_description`, `segment_order`)
    values (#{courseId,jdbcType=INTEGER}, #{segmentKey,jdbcType=VARCHAR}, #{segmentName,jdbcType=VARCHAR}, 
      #{segmentDescription,jdbcType=VARCHAR}, #{segmentOrder,jdbcType=INTEGER})
  </insert>
  <insert id="insertSelective" parameterType="com.lsj.os_frameworks_learning.os_frameworks.mybatis.model.Coursesegment">
    <selectKey keyProperty="id" order="AFTER" resultType="java.lang.Integer">
      SELECT LAST_INSERT_ID()
    </selectKey>
    insert into `tab_course_segment`
    <trim prefix="(" suffix=")" suffixOverrides=",">
      <if test="courseId != null">
        `course_id`,
      </if>
      <if test="segmentKey != null">
        `segment_key`,
      </if>
      <if test="segmentName != null">
        `segment_name`,
      </if>
      <if test="segmentDescription != null">
        `segment_description`,
      </if>
      <if test="segmentOrder != null">
        `segment_order`,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides=",">
      <if test="courseId != null">
        #{courseId,jdbcType=INTEGER},
      </if>
      <if test="segmentKey != null">
        #{segmentKey,jdbcType=VARCHAR},
      </if>
      <if test="segmentName != null">
        #{segmentName,jdbcType=VARCHAR},
      </if>
      <if test="segmentDescription != null">
        #{segmentDescription,jdbcType=VARCHAR},
      </if>
      <if test="segmentOrder != null">
        #{segmentOrder,jdbcType=INTEGER},
      </if>
    </trim>
  </insert>
  <update id="updateByPrimaryKeySelective" parameterType="com.lsj.os_frameworks_learning.os_frameworks.mybatis.model.Coursesegment">
    update `tab_course_segment`
    <set>
      <if test="courseId != null">
        `course_id` = #{courseId,jdbcType=INTEGER},
      </if>
      <if test="segmentKey != null">
        `segment_key` = #{segmentKey,jdbcType=VARCHAR},
      </if>
      <if test="segmentName != null">
        `segment_name` = #{segmentName,jdbcType=VARCHAR},
      </if>
      <if test="segmentDescription != null">
        `segment_description` = #{segmentDescription,jdbcType=VARCHAR},
      </if>
      <if test="segmentOrder != null">
        `segment_order` = #{segmentOrder,jdbcType=INTEGER},
      </if>
    </set>
    where `id` = #{id,jdbcType=INTEGER}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.lsj.os_frameworks_learning.os_frameworks.mybatis.model.Coursesegment">
    update `tab_course_segment`
    set `course_id` = #{courseId,jdbcType=INTEGER},
      `segment_key` = #{segmentKey,jdbcType=VARCHAR},
      `segment_name` = #{segmentName,jdbcType=VARCHAR},
      `segment_description` = #{segmentDescription,jdbcType=VARCHAR},
      `segment_order` = #{segmentOrder,jdbcType=INTEGER}
    where `id` = #{id,jdbcType=INTEGER}
  </update>
</mapper>